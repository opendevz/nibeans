
ImplClass(info) ::= <<
/** Bean implementation for interface {@link <info.intfElement.qualifiedName>} */
public static class <info.clsName>
    <if(info.baseImpl)>
    extends <info.baseImpl.clsName>
    <endif>
    implements <info.intfElement.qualifiedName> {

}
>>

impl_file(pkgName,containerClassName,classes) ::= <<

package <pkgName>;

public class <containerClassName> {

<classes:{implClass|
    public static class <implClass.clsName>
        <if(implClass.baseImpl)>
        extends <implClass.baseImpl.clsName>
        <endif>
        implements <implClass.intfElement.qualifiedName> {

        // Data fields
    <implClass.propertyDefs:{prop|
    private <prop.fieldType> <prop.fieldName>;
    }>
    <implClass.propertyDefs:{prop|
    /** {@inheritDoc\} */
    @Override
    public <prop.getter.returnType> <prop.getter.simpleName>() {
        return this.<prop.fieldName>;
    \}
    /** {@inheritDoc\} */
    @Override
    public void <prop.setter.simpleName>(<prop.setterType> v) {
        this.<prop.fieldName> = v;
    \}
    <if(prop.chainSetter)>
    /** {@inheritDoc\} */
    @Override
    public <implClass.clsName> <prop.chainSetter.simpleName>(<prop.chainSetterType> v) {
        this.<prop.fieldName> = v;
        return this;
    \}
    <endif>

    }>

        @Override
        public boolean equals(Object p) {
            if (!(p instanceof <implClass.intfElement.qualifiedName>)<if(implClass.baseImpl)> || !super.equals(p)<endif>) {
                return false;
            \}
            final <implClass.intfElement.qualifiedName> other = (<implClass.intfElement.qualifiedName>)p;
        <implClass.propertyDefs:{prop|
    // property <prop.name>
    <prop.fieldType> <prop.name>_other = other.<prop.getter.simpleName>();
    <if(prop.primitive)>
    if (this.<prop.fieldName> != <prop.name>_other) {
        return false;
    \}
    <elseif(prop.array)>
    if (!java.util.Arrays.equals(this.<prop.fieldName>, <prop.name>_other)) {
        return false;
    \}
    <else>
    if (!<pkgName>.<containerClassName>.equalsNullSafe(this.<prop.fieldName>, <prop.name>_other)) {
        return false;
    \}
    <endif>}>
            return true;
        \}

        @Override
        public int hashCode() {
            return java.util.Arrays.hashCode(new Object[]{<if(implClass.baseImpl)>super.hashCode(),<endif>
                <implClass.propertyDefs:{prop|this.<prop.fieldName>};separator=",">\});
        \}

        public static class Provider implements org.nibeans.internal.BeanProvider\<<implClass.intfElement.qualifiedName>\> {
            @Override
            public Class\<<implClass.intfElement.qualifiedName>\> getBeanInterface() {
                return <implClass.intfElement.qualifiedName>.class;
            \}
            @Override
            public <implClass.intfElement.qualifiedName> createInstance() {
                return new <implClass.clsName>();
            \}
            @Override
            public String toString() {
                return "BeanProvider[<implClass.intfElement.qualifiedName>]";
            \}
        \}
    \}

}>

    public static class ProviderService implements org.nibeans.internal.BeanProviderService {
        @Override
        public void registerProviders(org.nibeans.internal.BeanProviderRegistry registry) {            
        <classes:{implClass|
    registry.register(new <implClass.clsName>.Provider());
        }>
        \}
    \}

    private static boolean equalsNullSafe(Object a, Object b) {
        return (a == null) ? (b == null) : (b != null && a.equals(b));
    \}

}

>>
